@using OnlineStoreManager.Infracstructure;
@using OnlineStoreManager.Database.Models;
@using System.ComponentModel.DataAnnotations;
@model OnlineStoreManager.Models.ViewModels.OrderIndexViewModel
@inject IPageMaster PageMaster

<!-- /*  RENDER GRID TOOLBAR */ -->
<script hide>

   var toolbarItemStyle = 'margin: 0 3.5px;';
   var _toolbarItems1 = [
      {
         type: 'html',
         html: function (item) {
            return `<button class="_small_btn"`
               + `      style="${toolbarItemStyle}" `
               + `      onclick="ORDER_PAGE.onAdd()">`
               + `      <img class="small_icon" src="/icons/add.svg"/>`
               + `       Tạo mới `
               + `</button>`;
         },
      },
      {
         type: 'html',
         html: () => {
            return `<button class="_small_btn"
                  style="${toolbarItemStyle}"
                  onclick="ORDER_PAGE.onDelete()">
                  <img class="small_icon" src="/icons/cancel.svg"/>
                  Xóa
               </button>`;
         },
      },
      {
         type: 'html',
         html: function (item) {
            return `
                  <button class="_small_btn"
                     style="${toolbarItemStyle}"
                     onclick="ORDER_PAGE.onEdit()">
                     <img class="small_icon" src="/icons/pen.svg"/>
                     Chỉnh sửa
                  </button>`;
         },
      },
      {
         type: 'break',
         style: 'margin: 0 21px;',
      },
      {
         type: 'html',
         html: function () {
            var inpStyle = `margin: 0 3.5px;height: 28px!important;
               border: 1px solid #c5c5c5;border-radius: 4px;background-color:#f9f9f9;
               font-weight: bold;font-size: 13px;width:160px;`;
            return `
                  <input name="FromDate" type="date" style="${inpStyle}"
                     data-date="Từ: chưa chọn" />
            `;
         }
      },
      {
         type: 'html',
         html: function (item) {
            var inpStyle = `margin: 0 3.5px;height: 28px!important;
               border: 1px solid #c5c5c5;border-radius: 4px;background-color:#f9f9f9;
               font-weight: bold;font-size: 13px;width:160px;`;
            return `
                  <input name="ToDate" type="date" style="${inpStyle}" 
                     data-date="Đến: chưa chọn"/>`;
         }
      },
      {
         type: 'html',
         html: function () {
            return `
                  <button class="_small_btn"
                     style="${toolbarItemStyle}"
                     onclick="ORDER_PAGE.onSelectDate()">Lọc
                  </button>`;
         },
      },
      {
         type: 'break',
         style: 'margin: 0 21px;',
      },
      {
         type: 'html',
         html: function (item) {
            return `
                  <input class="toolbar_input" type="text"
                     extend_query="SearchText" submit_on_keypress
                     placeholder="Tìm kiếm ... "
                     style="border-radius:4px;padding-right: 30px; width: 150px; ${toolbarItemStyle}"/>`;
         }
      },
      {
         type: 'html',
         html: function (item) {
            return `
                  <button style="margin-left: -27px;">
                      <img class="small_icon" src="/icons/search.svg"/>
                  </button>`;
         }
      },
      {
         type: 'break',
         style: 'margin: 0 21px;',
      },
      {
         type: 'html',
         html: function (item) {
            return `
                  <button class="_small_btn" style="${toolbarItemStyle}"
                     onclick="window.location.replace('/@ViewBag.TabName')">
                     <img class="small_icon" src="/icons/reload.svg"/>
                     Tải lại </button>`;
         }
      },
   ];

   $().w2toolbar({
      name: '_toolbar_top',
      style: 'height:50px;padding-top:11px;',
      items: _toolbarItems1.filter(p => {
         if (p.tabs)
            return p.tabs.find(p => p == '@ViewBag.TabName')
         return true;      // neu khong dinh nghia p.tabs, mac dinh la lay cho tat ca
      }),
      onRender: function (e) {
         e.onComplete = function () {
            // date picker
            function formatDate(date) {
               date = new Date(date);
               var dd = date.getDate();
               var mm = date.getMonth() + 1; //January is 0!
               var yyyy = date.getFullYear();
               if (dd < 10)
                  dd = '0' + dd
               if (mm < 10)
                  mm = '0' + mm
               return dd + '-' + mm + '-' + yyyy;
            }

            var _fromDate = '@Model.FromDate',_toDate = '@Model.ToDate';
            // assign default value
            //
            $('input[name="FromDate"]').val(_fromDate);
            $('input[name="ToDate"]').val(_toDate);
            if (_fromDate) {
               $('input[name="FromDate"]')
                  .attr('data-date', 'Từ: ' + formatDate(_fromDate));
            }
            $('input[name="ToDate"]')
               .attr('data-date', 'Đến: ' + formatDate(_toDate));
            // set options
            //
            $('input[name="FromDate"]').attr('max', formatDate(new Date()));
            $('input[name="ToDate"]').attr('max', formatDate(new Date()));
            // handle events
            $('input[name="FromDate"]').change(function (e) {

               var fromDate = $('input[name="FromDate"]').val(),
                  toDate = $('input[name="ToDate"]').val();

               if (!fromDate)
                  return;

               $('input[name="FromDate"]')
                  .attr('data-date', 'Từ: ' + formatDate(fromDate));

               debugger
               // nếu đã chọn toDate và toDate lại bé hơn toDate
               if (toDate && fromDate > toDate) {
                  $('input[name="ToDate"]').val(fromDate);
                  $('input[name="ToDate"]')
                     .attr('data-date', 'Đến: ' + formatDate(fromDate));
               }
            });
            $('input[name="ToDate"]').change(function (e) {
               var fromDate = $('input[name="FromDate"]').val(),
                  toDate = $('input[name="ToDate"]').val();

               if (!toDate)
                  return;

               $('input[name="ToDate"]')
                  .attr('data-date', 'Đến: ' + formatDate(toDate));

               debugger
               // nếu đã chọn fromDate và fromDate lại lớn hơn toDate
               if (fromDate && toDate < fromDate) {
                  $('input[name="FromDate"]').val(toDate);
                  $('input[name="FromDate"]')
                     .attr('data-date', 'Từ: ' + formatDate(toDate));
               }
            });
         }
      }
   });
</script>

<!-- /*  RENDER GRID */ -->
<script hide>

   var _columns = [
      { field: 'id', caption: 'Mã đơn hàng', size: '20%' },
      { field: 'createddate', caption: 'Ngày tạo', size: '10%' },
      { field: 'receivername', caption: 'Tên người nhận', size: '10%' },
      { field: 'deliveryaddress', caption: 'Địa chỉ giao hàng', size: '20%' },
      { field: 'receiverphonenumber', caption: 'Số điện thoại', size: '10%' },
      { field: 'description', caption: 'Ghi chú', size: '30%' }
   ];

   var _records = [
      @{ var recordFields = new string[6]; }
      @foreach (var item in Model.Orders)
      {
         recordFields[0] = "id:" + $" '{ item.Id }' ";
         recordFields[4] = "createddate:" + $" '{ item.CreatedDate }' ";
         recordFields[1] = "receivername:" + $" '{ item.ReceiverName }' ";
         recordFields[2] = "deliveryaddress:" + $" '{ item.DeliveryAddress }' ";
         recordFields[3] = "receiverphonenumber:" + $" '{ item.ReceiverPhoneNumber }' ";
         recordFields[5] = "description:" + $" '{ item.Description }' ";

         @Html.Raw("{ " + String.Join(',', recordFields) + " }," );
      }
   ];

   $().w2grid({
      name: '_grid',
      recid: 'id',
      show: {
         selectColumn: true,
         lineNumbers: true,
      },
      multiSelect: true,
      columns: _columns.filter(p => {
         if (p.tabs)
            return p.tabs.find(p => p == '@ViewBag.TabName')
         return true;      // neu khong dinh nghia p.tabs, mac dinh la lay cho tat ca
      }),
      records: _records,
      onRender: function (e) {
         e.onComplete = function () {
            this.refresh();
            hideScripts();
            extendQuery();
         }
      }
   });
</script>

<!-- /* RENDER GRID PAGINATION  */-->
<script hide>
   
   $().w2layout({
      name: '_pagination',
      panels: [
         {
            type: 'top', size: 35,
            content: `
               <div style="height:35px;">
                  @await Html.PartialAsync("_W2uiPaginationPartial", new
                   {
                      CurrentPage = Model.CurrentPage,
                      TotalItems = Model.TotalItems,
                      PageSize = Model.PageSize
                   })
               </div>`,
         },
      ],
      onRender: function (e) {
         e.onComplete = function () {
            _w2uiPagination({
               container: '#w2ui-pagination',
               pageSize: @Model.PageSize,
               currentPage: @Model.CurrentPage,
               totalItems: @Model.TotalItems,
            });
         }
      }
   });
</script>

<!-- /* Đưa giao diện lên View  */-->
<script hide>
   $().w2layout({
      name: '_order_index',
      panels: [
         { type: 'main' },    // product listview
      ]
   });

   $().w2layout({
      name: '_toolbar',
      panels: [
         { type: 'top', size: '50', style: panelStyle },     // tabs,
      ]
   });
   w2ui['_toolbar'].content('top', w2ui['_toolbar_top']);

   $().w2layout({
      name: '_order_index_main',
      panels: [
         { type: 'top', size: 50 },     // toolbar,
         { type: 'main' },     // grid
         { type: 'bottom', size: 35, style: panelStyle }    // pagination
      ]
   });

   w2ui['_order_index_main'].content('top', w2ui['_toolbar']);
   w2ui['_order_index_main'].content('main', w2ui['_grid']);
   w2ui['_order_index_main'].content('bottom', w2ui['_pagination']);

   w2ui['_order_index'].content('main', w2ui['_order_index_main']);

   w2ui['_main_content'].content('main', w2ui['_order_index']);
</script>


@section ViewScripts {
   <script hide src="~/js/Views/Order/Index.js"></script>
}